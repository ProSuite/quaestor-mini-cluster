# Configuration file for quaestor console application
# This file will be searched in the directory provided by the --configDir command line option
# If --configDir is not specified it is expected in the current directory.
#
# --------------------------------------------------------
# Configuration for service discovery / load balancer mode
# This section is relevant if quaestor is started with the 'load-balancer' option
# However, the key-value store used by the service registry is determined by the cluster 
# configuration below:
# - An etcd based, distributed key-value store is used if an agent of type KeyValueStore is defined.
# - Alternatively, a process-local, in-memory key-value store is configured using all Worker agents.
loadBalancerConfig:

  # The host name. Note that in case TLS is used (i.e. a certificate is specified) this must be
  # identical to the certificate's subject alternative name.
  hostName: localhost

  # The port.
  port: 5150
  
  # The server certificate to be used for transport security (SSL/TLS). Specify the server certificate 
  # subject or thumbprint from the certificate store (Local Computer). Note that the certificate's 
  # private key must be accessible to this executable, unless the --key parameter is also specified. 
  # Alternatively this can be a PEM file containing the certificate chain (including the root 
  # certificate shared with the client).
  # Troubleshooting: If the specified thumbprint of the form 021f85bc637e33df8d8b1583ea2058e92c73335d
  # cannot be found the process probably must be run with elevated privileges. This is necessary to
  # extract the private key from the certificate file.
  certificate:
  
  # The private key PEM file (to remain on the server). If not specified and the certificate found in 
  # the store has a private exportable key the private key will be extracted from the certificate.
  privateKeyFile:

  # Enforce mutual authentication for transport layer security (SSL/TLS).
  enforceMutualTls: false

  # The timeout in seconds that is waited for when checking an individual worker service.
  # It is used both for checking health and getting the load report. If the worker service does not
  # respond within this time frame, it will be ignored.
  serviceResponseTimeoutSeconds: 2

  # The time a service, that has just been returned to a requestor, remains in the least-recently-used
  # cache which results in a low priority for immediate re-use. This is used to avoid race conditions
  # if two clients request a service location at the very same time. It has the effect of a round-robin
  # secondary balancing mechanism.
  recentlyUsedTimeoutSeconds: 5

# --------------------------------------------------------
# Configuration section for the cluster management mode.
# # This section is relevant if quaestor is started with the 'cluster' option
clusterConfig:
  # The cluster name (global scope, primarily for display purposes).
  name: example_cluster
  # The heart beat interval in seconds.
  heartBeatIntervalSeconds: 30
  # The time-out for the health check performed on each agent during the heart beat
  memberResponseTimeOutSeconds: 20
  # The time-out for an agent shut-down in case it is not healthy (NOT IMPLEMENTED for local process)
  memberMaxShutdownTimeSeconds: 0
  # The number of times an agent re-start is attempted in case it is unhealthy or not running 
  memberMaxStartupRetries: 25

# List of agents that are managed by the cluster. Currently only local processes are supported.
# All agents are started by the cluster and checked for health during the heart beat.
# Some well-known agent types are:
# KeyValueStore (see below for an example): Etcd key-value store to be used as service registry
# Worker: Agents to be used in a local in-memory key-value store, in case no KeyValueStore agent
#         has been defined.
# However, any other agent type can be defined.
agents:
  Worker:
    # The (absolute or relative) path to the executable
    executablePath: ..\..\..\..\..\examples\HelloWorld\WorkerProcess\bin\Debug\net8.0\WorkerProcess.exe
    # The command line arguments. {HostName} and {Port} will be replaced by the respective values 
    # defined below.
    commandLineArguments: "{Port} 100"
    # The number of processes to be started. Typically the port list (see below) contains the same 
    # number of items.
    processCount: 4
    # The action to be performed on each member if the cluster is shut down. Currently valid 
    # shutdown actions: {None, Kill}
    clusterShutdownAction: Kill
    # The dictionary of {name: value} pairs that should be added as environment variables
    environmentVariables:
      QUAESTOR_WORKER_EXIT_WHEN_UNHEALTHY: false
    # The host name to be used for health-checks and service discovery by the LoadBalancer
    hostName: localhost
    # Whether transport layer security (SSL/TLS) is used by the server.
    useTLS: false
    # The list of ports (must correspond with the processCount from above). If empty, ephemeral
    # ports are used.
    ports: [ 5161, 5162, 5163, 5164 ]
    # The list of services that respond to health check requests
    serviceNames:
    - Worker
    # The time in seconds to wait after the startup before the first health check is perfomed
    # Default: 8 seconds. Increase this value for slow-starting processes (such as etcd)
    startupWaitSeconds: 8
    # The average process recycling interval in hours. Processes are only recycled if they are
    # idle. The specified interval will be randomly varied by +-10% to disperse recycling times 
    # and maximize availability. 0 (or not specified) means no process recycling will take place.
    # NOTE: to determine if a process is idle, its services must implement load reporting.
    #       otherwise the service will be killed and restarted immedidately.
    recyclingIntervalHours: 24

  LoadBalancer:
    executablePath: quaestor.exe
    commandLineArguments: "load-balancer"
    processCount: 1
    clusterShutdownAction: Kill
    # The dictionary of key: value pairs that should be added as environment variables
    environmentVariables:
      QUAESTOR_LOGFILE_SUFFIX: Load_Balancing
      TEMP: C:\Temp
    hostName: localhost
    useTLS: false
    ports:
    - 5150
    serviceNames:
    - ServiceDiscoveryGrpc
    recyclingIntervalHours: 0

#  # Example for an etcd-based, distributed keyvalue store to be used by the service discovery. 
#  # Remove this section to use a local in-memory key-value store containing just the Worker agents.
#  KeyValueStore:
#    # Executable: https://github.com/etcd-io/etcd/releases/ (v. 3.4 or higher, add the install dir
#    # to the path environment variable or define the fully qualified location)
#    executablePath: etcd.exe
#    # see https://github.com/etcd-io/etcd/blob/release-3.4/etcd.conf.yml.sample
#    # --config-file C:\data\git\quaestor-mini-cluster\build\output\etcd_conf.yml
#    commandLineArguments:
#    processCount: 1
#    # etcd needs a peer to start being healthy. Make sure to start its peer within this time:
#    startupWaitSeconds: 120
#    # Leave it running, other nodes might rely on it
#    clusterShutdownAction: None
#    hostName: 127.0.0.1
#    useTLS: false
#    # The official etcd default port for client requests is 2379
#    ports:
#    - 2379
#    # Etcd's health check implementation does not respond for specific service names, but it
#    # supports health check requests with empty service names:
#    serviceNames: []
