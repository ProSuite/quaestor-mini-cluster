syntax = "proto3";

/**
 * The load report service definition and its associated request and response 
 * message types. A deliberate deviation of the canonical load report format
 * defined in https://github.com/grpc/grpc/blob/master/src/proto/grpc/lb/v1/load_reporter.proto 
 *
 */

package Quaestor.LoadReporting;

/**
  * The load report service.
  */
service LoadReportingGrpc {

	/**
    * Provide server load for a given service name.
    */
	rpc ReportLoad(LoadReportRequest) returns (LoadReportResponse) {}
}

/**
  * The load report request.
  */
message LoadReportRequest {

	/** The global scope of the service (e.g. cluster name or namespace). */
	string scope = 1;

	/** The service name. */
	string service_name = 2;
}

/**
  * The load report response.
  */
message LoadReportResponse {

	/** The time of creation or the last report. */
	int64 timestamp_ticks = 1;

	/** The known load rate by which the available services should be prioritized.
	  * If a positive number is returned, the load balancer is advised to use it 
		* directly and ignore the server_stats.
		* If a negative number is returned, the load rate is calculated from the 
		* server stats: (current_requests / request_capacity) multiplied by the 
		* server_utilization if it is > 0.
		*/
	double known_load_rate = 2;

	/** The server statistics. */
	ServerStats server_stats = 3;
}

/**
  * The server statistics.
  */
message ServerStats {

	/** The maximum number of concurrent requests. Not necessarily a hard limit. */
	int32 request_capacity = 1;

	/** The number of requests currently being processed. The utilization factor 
	  * calculated by the load balancer is (current_requests / request_capacity).
		*/
	int32 current_requests = 2;

	/** The average hardware utilization, such as CPU usage of the process since 
	  * the last report in the range [0.0 - 1.0].
		*/
	double server_utilization = 3;
}

